package Algorithm;

// 가장 많이 사용하고, 공부하는 분야

// 시작 노드에서 출발하여, 한쪽 분기를 정하여
// 최대 깊이까지 탐색을 마친 후 다른쪽 분기로 이동
// 방문 노드를 다시 방문하면 안되므로, 방문여부를 체크할 배열 필요

// 시간복잡도: 노드 수 + 에지 수
// 재귀 함수로 구현하거나 스택 이용
// 재귀 함수를 많이 사용
// 스택 오버플로에 유의

// 문제 예시

// 단절점 찾기, 단절선 찾기, 사이클 찾기, 위상 정렬

// 1. 원본 그래프 => 인접리스트 그래프 표현 => 방문배열(불린 or int) => 스택 자료구조에 시작점 더하기
// 2. 스택에서 노드를 꺼내면서 탐색순서에 꺼낸 노드 기록 => 대상 노드의 인접 노드를 스택에 삽입 => 노드를 삽입하며, 방문배열 체크
// 3. 스택 자료구조에 값이 없을 때까지 반복
// 4. 이미 방문한 노드는 스킵

public class DFS {

}
