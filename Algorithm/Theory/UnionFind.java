// 유니온 파인드

// 일반적으로 여러 노드가 있을 때,
// 특정 2개의 노드를 연결해 1개의 집합으로 묶는 union 연산과
// 두 노드가 같은 집합에 속해 있는지를 확인하는 find연산으로 구성되어 있는 알고리즘

// -------------------------------------------------------------------------------------

// 핵심 이론

// Union 연산
// 각 노드가 속한 집합을 1개로 합치는 연산

// find 연산
// 특정 노드에 관해 그 노드가 속한 집합의 대표 노드를 반환하는 연산

// -------------------------------------------------------------------------------------

// 원리 이해하기

// 1. 1차원 배열을 이용(일반적인 방법)
// => 처음에는 각 노드가 연결되어 있지 않으므로 각 노드가 대표 노드가 됨
// => 배열은 자신의 인덱스 값으로 초기화 됨

// 2. 2개의 노드를 선택해 각각의 대표 노드를 찾아 연결하는 Union 연산을 수행

// 3. find연산은 자신의 대표 노드를 찾는 연산, 그래프를 정돈하고, 시간복잡도 향상

// -------------------------------------------------------------------------------------

// find 연산의 작동 원리

// 1. 대상 노드 배열에 index값과 value값이 동일한지 확인
// 2. 동일하지 않으면 value값이 가리키는 index 위치로 이동
// 3. 이동 위치의 index값과 value값이 같을 때까지 1,2번을 반복(재귀함수로 구현)
// 4. 대표 노드에 도달하면 재귀함수를 빠져나오면서 거치는 모든 노드값을 루트 노드값으로 변경

// -------------------------------------------------------------------------------------

// 경로 압축
// 실제 그래프에서 여러 노드를 거쳐야 하는 경로에서 그래프를 변형해,
// 더 짧은 경로로 갈 수 있도록 함으로써 시간 복잡도를 효과적으로 줄이는 방법