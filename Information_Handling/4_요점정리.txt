개발 환경 구축

1) 개요
하드웨어 및 소프트웨어 장비 구축
성능, 편의성, 라이선스등을 결정하여 구축

2) 하드웨어 환경
클라이언트와 서버로 구성

- Web Server
저용량의 '정적' 파일 제공

- WAS(Web Application Server)
동적인 컨텐츠를 처리하는 미들웨어

- Database Server
데이터베이스와 이를 관리하는 DBMS를 운영하는서버

- File Server
데이터베이스에 저장하기에는 비효율적일 때
서비스 제공을 목적으로 유지하는 파일을 저장하는 서버

3) Web Server 기능
HTTP/HTTPS 지원 : 브라우저로부터 요청받아 응답할 때
Communication Log(통신 기록) : 처리한 요청을 로그 파일로 기록하는 기능
Managing Static FIles(정적 파일 관리) : HTML, CSS, 이미지 등의 정적 파일들을 저장하고 관리하는 기능
대역폭 제한(Bandwidth Throttling) : 네트워크 트래픽의 포화 방지를 위해 응답 속도 제한
가상 호스팅(Virtual Hosting) : 하나의 서버로 여러 개의 도메인 이름을 연결하는 기능
인증(Authentication) : 사용자가 합법적인 사용자인지 확인

4) 소프트웨어 환경
- 시스템 + 개발 소프트웨어
시스템 소프트웨어 : OS, 웹서버 및 WAS 운용을 위한 서버 프로그램, DBMS
개발 소프트웨어 : 요구사항 관리 도구, 설계/모델링 도구, 빌드 도구, 구현 도구, 테스트 도구, 형상 관리 도구

- 요구사항 관리 도구
수집, 분석, 추적 등을 편리하게 도와주는 소프트웨어

- 설계/모델링 도구
UML 지원, 개발 전 과정에서 설계 및 모델링을 도와주는 소프트웨어

- 빌드 도구
구현 도구를 통해 작성된 소스의 빌드 및 배포, 라이브러리 관리를 지원하는 소프트웨어

- 구현 도구
개발 언어를 통해 어플리케이션의 실제 구현을 지원하는 소프트웨어

- 테스트 도구
모듈 들이 요구사항에 적합하게 구현됐는지 테스트하는 소프트웨어

- 형상 관리 도구
산출물들을 버전별로 관리하여 품질 향상을 지원하는 소프트웨어

5) 개발 언어 선정 기준
적정성 : 개발하려는 소프트웨어의 목적에 적합해야 함
효율성 : 코드의 작성 및 구현이 효율적이어야 함
이식성 : 다양한 시스템 및 환경에 적용 가능
친밀성 : 개발 언어에 대한 개발자들의 이해도와 활용도가 높아야 함
범용성 : 다른 개발 사례가 존재하고 여러 분야에서 활용되고 있어야 함




서버 개발
1) 개요
서버 프로그램을 제작하여 WAS에 탑재하는 것
서버개발 언어 : Java, JavaScript, Python, PHP, Ruby 등

2) 서버 개발 프레임워크
Framework : 뼈대, 골조, 특정 기능을 위해 필요한 클래스나 인터페이스의 집합체
대부분 MVC(Model, View, Controller) 패턴을 기반으로 개발
- 종류
Spring : Java 기반, 전자정부 표준 프레임워크 기반 기술
Node.js : JavaScript 기반, 비동기 입출력 처리와 이벤트 위주의 높은 처리 성능
Django : Python 기반, 컴포넌트 재사용 및 플러그인화 지원(신속 개발 가능)
Codeigniter : PHP 기반, 인터페이스 간편
Ruby on Rails : Ruby 기반, DB단순화 => 코드 길이 단축 (신속 개발 가능)

3) 서버 프로그램 구현(효과적인 모듈 설계)
모듈 개발 후 통합하는 방식으로 구현
유지보수가 용이해야 함
결합도를 약하게, 응집도를 강하게
일관성 유지
공통 모듈은 재사용 할 수 있는 모듈 의미
- 재사용 프로그래밍 기법
객체지향, 제네릭, 자동, 메타

4) 프레임워크 특성
모듈화(Modularity) :  변경에 따른 영향 최소화
재사용성(Reueability) : 재사용 가능 모듈 제공
확장성(Extensibility) : 다형성(Polymorphism)을 통한 인터페이스 확장
제어의 역흐름(Inversion of Control) : 객체들의 제어를 프레임워크가 관리

5) 프레임워크 구성요소
개발환경
실행환경
운영환경
관리환경




보안 및 API
1) 소프트웨어 개발 보안의 개요
보안 취약점 최소화, 안전한 소프트웨어 개발을 위한 일련의 보안 활동
시큐어 코딩(Secure Coding)
기밀성(Confidentiality), 무결성(Integrity), 가용성(Availability) 유지가 목표
소프트웨어 개발 보안 가이드를 참고(정부 제공) -> 보안항목 점검

2) 소프트웨어 개발 보안 점검 항목
(세션 : 서버와 클라이언트의 연결)
세션 통제 : 세선과의 연결로 발생하는 정보 관리
=> 보안 약점 : 불충분한 세션 관리, 잘못된 세션에 의한 정보 노출

입력 데이터 검증 및 표현 : 입력 데이터에 대한 검층체계 보유 및 처리 기능
=> 보안 약점 : SQL 삽입, 경로 조작 및 자원 삽입, XSS(Cross-Site Scripting)

보안 기능 : 인증, 접근제어, 기밀성, 암호화
=> 보안 약점 : 적절한 인증 없는 중요기능 허용, 부적절한 인가, 사이트 간 요청 위조(CSRF; Cross-Site Request Forgery) 등

시간 및 상태 : 병렬 처리 시스템이나 시간과 실행 상태를 관리
=> 보안 약점 : 종료되지 않는 반복문 또는 재귀함수, 검사 시점과 사용 시점 경쟁 조건 등

에러처리 : 발생 가능 오류 사전 정의하여 문제 예방
=> 보안 약점 :  오류 메시지를 통한 정보 노출, 오류 상황 대응 부재 등

코드 오류 : 자원의 반환, 타입 변환 고려
=> 보안 약점 : 부적절한 자원 해제, 널 포인터 역 참조 등

캡슐화 : 데이터와 함수를 하나의 객체로 묶어 코딩
=> 보안 약점 : 제거되지 않고 남은 디버그 코드, 잘못된 세션에 의한 데이터 정보 노출 등

API 오용 : 보안에 취약한 API를 사용하지 않도록 고려하여 코딩
=> 보안 약점 : 취약한 API 사용, DNS lookup에 의존한 보안결정 등

3) API(Application Programming Interface)
응용 프로그램 개발 시 라이브러리를 이용할 수 있도록 함으로써 효율적인 소프트웨어 구현을 도와주는 인터페이스
개발에 필요한 여러 도구 제공
누구나 무료로 사용할 수 있게 공개된 API == Open API



배치(Batch) 프로그램
1) 개요
사용자와의 상호작용 없이 정해진 순서에 따라 일괄적으로 처리

- 종류
이벤트성 배치 : 특정 조건을 설정해두고 조건이 충족될 때만 수행
On-Demand 배치 : 사용자 요청시 수행
정기 배치 : 일, 주, 월과 같이 정해진 기간에 정기 수행

- 필수 요소
대용량 데이터 : 대량의 데이터 처리가 가능해야 함
자동화 : 사용자의 개입 없이 수행
견고성 : 중단되는 일 없이 수행
안전성/신뢰성 : 오류가 발생하면 추적할 수 있어야 함
성능 : 수행을 방해하지 않아야 함, 지정된 시간 내에 처리가 완료되어야 함

2) Batch Scheduler, Job Scheduler
일괄 처리 작업이 설정된 주기에 맞춰 자동으로 수행되도록 지원
- Spring Batch
Spring 프레임워크의 특성을 그대로 가져옴
스프링이 가지고 있는 다양한 기능을 모두 사용할 수 있는 오픈 소스 프레임워크

- Quartz
Spring 프레임워크로 개발되는 프로그램들의 일괄처리를 위한 다양한 기능을 제공하는 오픈소스 라이브러리




패키지 소프트웨어
1) Package Software
기업에서 일반적으로 사용하는 여러 기능들을 통합하여 제공
기업에서 패키지 소프트웨어를 구입해 기업 환경에 적합하게 커스터마이징 후 사용
기능 요구사항이 70% 이상 충족시키는 패키지 소프트웨어 사용

2) 패키지 vs 전용 개발 소프트웨어
기능 요구사항 : 70% 이상 충족시키는 소프트웨어 / 모든 기능 요구사항 반영 가능
안정성 : 품질 검증, 업계 표준 준용 / 개발자의 역량에 따라 다름
라이선스 : 판매자 / 회사
생산성 : 개발을 위한 인력과 시간 절약 가능 / 개발을 위한 인력과 시간 필요
호환성 : 보장 안됨 / 호환성 좋음
유지보수 : 결함 발생 시 즉시 대응 어려움 / 가능




데이터 타입

변수에 저장될 데이터의 형식
- Boolean
조건의 참, 거짓
- Character
하나의 문자
- Character String
문자열 저장
- Integer
정수
- Floating point
부동 소수점(실수)
- Array 
데이터 집합을 만들어 저장

-- C/C++의 데이터 타입 크기

- 문자/부호없는 문자형
char/unsigned char => 1 Byte

- 정수/부호없는 정수형
short/unsigned short => 2 Byte
int/unsigned int => 4 Byte
long/unsigned long => 4 Byte
long long => 8 Byte

- 실수
float => 4 Byte
double => 8 Byte
long double => 8 Byte




변수
1) 개요
발생하는 값을 저장하기 위한 공간
변할 수 있는 값

2) 변수명 작성 규칙
영문자, 숫자, _ 사용 가능
숫자는 올 수 없음
대, 소문자 구분
공백이나 특수문자 사용 불가능
예약어 사용 불가능
문장 끝에 세미콜론 필수

3) 예약어 - C언어
-- 제어문
- 반복
do, for, while
- 선택
case, default, else, if, switch
- 분기
break, continue, goto, return

-- 자료형
char, short, int, long, float, double, enum, signed, unsigned, union, void, struct, typedef

-- 기억 클래스
auto, register, static, extern

-- 기타
const, sizeof, volatile

4) 기억 클래스
변수 선언시 변수 저장을 위해 할당되는 기억영역을 결정하는 작업 : Storage Class

- 자동 변수
기억영역: 메모리(스택)
예약어 : auto
생존 기간 : 일시적
사용범위 : 지역적

-레지스터 변수
기억영역 : 레지스터
예약 : register
생존기간 : 일시적
사용범위 : 지역적

- 정적 변수(내부)
기억 영역 : 메모리(데이터)
예약어 : static
생존기간 : 영구적
사용범위 : 지역적

- 정적 변수(외부)
기억 영역 : 메모리(데이터)
예약어 : static
생존 기간 : 영구적
사용 범위 전역적

- 외부 변수
기억 영역 : 메모리(데이터)
예약어 : extern
생존기간 : 영구적
사용범위 : 전역적

5) 변수의 선언
자료형 : 변수에 저장될 자료의 형식 지정
변수명 : 사용자가 원하는 이름을 임의로 지정 (변수명 작성 규칙 준수)
값 : 변수를 선언하면서 초기화할 값을 지정




제어문, 반복문
1) 제어문 개념
일반적인 코드는 무조건 위에서 아래로 실행
이를 변경할 떼 사용하는 명령문

2) 단순 if 문

3) 다중 if 문

4) switch 문

5) 반복문의 개념
일정한 횟수를 반복하는 명령문

6) for 문
조건이  참이면 실행할 문장을 실행
증가값 만큼 증가
최종값에 대한 조건이 참인 동안 실행할 문장을 반복 수행

7) while 문
조건이 참인 동안 실행할 문장을 반복 수행
조건이 처음부터 거짓이면 한 번도 실행하지 않음

8) do ~ while 문
조건식을 반복문 마지막에 확인
=> 조건이 처음부터 거짓이어도 실행할 문장을 무조건 한번 실행 (while문과 다른점)

9) break, continue
break : switch문이나 반복문 안에서 break가 나오면 블록을 벗어남
continue : 이 이후의 문장을 실행하지 않고 처음으로 옮김, 반복문에서만




배열과 문자열
1) 배열의 개념
동일한 데이터 유형을 여러개 사용
개별 요소 위치는 index로 지정
변수명 뒤에 [] 붙이고 사용할 개수 지정 후 선언

2) 1차원 배열
자료형 : 배열에 저장할 자료의 형 지정
변수명 : 사용할 배열의 이름으로 사용자가 임의로 지정
개수 : 배열의 크기를 지정하는 것으로 생략 가능

3) 2차원 배열
자료형 : 배열에 저장할 자료의 형 지정
변수명 : 사용할 배열의 이름으로 임의로 지정
행개수 : 배열의 행 크기 지정
열개수 : 배열의 열 크기 지정




포인터
1) 포인터와 포인터 변수
포인터 : 변수의 주소
포인터 변수 : 변수의 주소를 저장할 때 사용하는 변수, 동적 변수

cf) 포인터 변수 선언 시, 자료형 먼저 -> 변수 명 앞에 간접 연산자 (ex) int *a)
cf) 변수의 주소를 알아낼 때는 &이용 ex) a = &b;
cf) 실행문에서 포인터 변수에  *붙이면, 해당 포인터 변수가 가리키는 곳의 값 ex) c = *a




절차적 프로그래밍 언어
1) 개요
순서대로 실행

2) 장단점
- 장점
실행 속도가 빠름
같은 코드를 복사 없이 다른 위치에서 호출하여 사용 가능(이식성 높음)
모듈 구성 용이, 구조적 프로그래밍 가능
- 단점
프로그램 분석 어려움
유지보수나 코드의 수정 어려움

3) 절차적 언어 종류

- C
시스템 프로그래밍 언어
포인터 제공
고급 프로그래밍 언어 + 저급 프로그래밍 언어
UNIX의 일부를 구성
이식성이 좋아 컴퓨터 기종에 관계 없음
컴파일러 방식의 언어

- Algol
과학 기술 계산용 언어
PASCAL과 C언어의 모체

- Cobol
사무 처리용 언어
영어 문장 형식 -> 이해와 사용 쉬움
4개의 DIVISION으로 구성

- Fortran
과학 기술 계산용

- Basic
교육용 => 문법 쉬움
다른 종류의 소스코드는 호환 안됨




객체지향 프로그래밍
1) 개요
객체를 조립해서 프로그램 작성

2) 장단점
- 장점
재사용과 시스템 확장 용이
코드 재활용성 높음
대형 프로그램 작성 용이

- 단점
실행 속도 느림
정형화된 분석 및 설계 방법이 없음

3) 객체지향 언어의 종류

- C++
C언어에 객체 지향 모델을 적용
모든 문제를 객체로 모델링하여 표현

- C#
MS개발
C++과 Java의 문법과 유사
Java와 달리 Unsafe Code같은 기술로 플랫폼 간 상호 운용성 확보

- Java
여러 작업 동시에 처리 가능
독립적이며 이식성 강함
캡슐화 가능, 재사용성 높음

- Delphi
윈도우 운영체제에서 모든부분을 프로그램 가능
기본적인 문법은 파스칼 기반에 여러 기능들이 추가
높은 생산성과 간결한 코드가 대표적 장점

- Smalltalk
1세대 객체지향 언어
최초로 GUI를 제공한 언어